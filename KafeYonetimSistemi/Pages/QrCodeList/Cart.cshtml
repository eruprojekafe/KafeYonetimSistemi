using KafeYonetimSistemi.Data;
using KafeYonetimSistemi.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Linq;

namespace KafeYonetimSistemi.Pages.QrCodeList
{
    public class CartModel : PageModel
    {
        private readonly ApplicationDbContext _context;

        public CartModel(ApplicationDbContext context)
        {
            _context = context;
        }

        public int TableNumber { get; set; }

        // Kullanıcıya gönderilecek ürünlerin listesi
        public List<CartItemDto>
    CartItems { get; set; } = new List<CartItemDto>
        ();

        // Sepet sayfasını yüklendiğinde çağrılacak
        public IActionResult OnGet()
        {
        if (Request.Query.ContainsKey("tableNumber"))
        {
        TableNumber = Convert.ToInt32(Request.Query["tableNumber"]);
        }
        return Page();
        }

        // Sepet verilerini sunucuya POST işlemiyle al ve işleme koy
        public IActionResult OnPost([FromBody] CartData cartData)
        {
        if (cartData == null || !cartData.CartItems.Any())
        {
        return BadRequest(new { message = "Sepet boş!" });
        }

        // Gönderilen MenuItemId'lere göre veritabanından ürün bilgilerini al
        var items = _context.MenuItem
        .Where(item => cartData.CartItems.Select(ci => ci.MenuItemId).Contains(item.Id))
        .ToList();

        if (items.Count == 0)
        {
        return BadRequest(new { message = "Ürünler bulunamadı!" });
        }

        // Sepetteki ürünlerin detaylarını güncelle
        CartItems = cartData.CartItems.Select(cartItem =>
        {
        var dbItem = items.FirstOrDefault(i => i.Id == cartItem.MenuItemId);
        return new CartItemDto
        {
        MenuItemId = cartItem.MenuItemId,
        Name = dbItem?.Name ?? "Bilinmeyen Ürün",
        Price = dbItem?.Price ?? 0,
        Quantity = cartItem.Quantity
        };
        }).ToList();

        // Sipariş oluştur
        var order = new Order
        {
        OrderTime = DateTime.Now,
        Status = OrderStatus.Created,
        Table = _context.Table.FirstOrDefault(t => t.TableNumber == cartData.TableNumber),
        MenuItems = items
        };

        _context.Order.Add(order);
        _context.SaveChanges();

        // İşlem başarılı
        return new JsonResult(new { message = "Sepet başarıyla işlendi.", CartItems });
        }
        }

        // Sepet öğesi için DTO sınıfı
        public class CartItemDto
        {
        public int MenuItemId { get; set; }
        public string? Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        }

        // Yeni gelen veri sınıfı
        public class CartData
        {
        public List<CartItemDto>
            CartItems { get; set; }
            public int TableNumber { get; set; }
            }
            }
